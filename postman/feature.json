{
	"info": {
		"_postman_id": "482073c4-604a-4e2a-a57a-cf45cfa33ef1",
		"name": "Test Feature Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21367826"
	},
	"item": [
		{
			"name": "[setup]",
			"item": [
				{
					"name": "[setup] add user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User1 name\",\r\n    \"email\": \"user1@mail.com\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[setup] add user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User2 name\",\r\n    \"email\": \"user2@mail.com\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[setup] add category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Category1 name\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "[setup] add event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Lorem ipsum aliquam.\",\r\n    \"category\": 1,\r\n    \"description\": \"Lorem ipsum aliquam.\",\r\n    \"eventDate\": \"2030-01-01 00:00:00\",\r\n    \"location\": {\"lat\": 55.754167, \"lon\": 37.62},\r\n    \"paid\": false,\r\n    \"participantLimit\": 10,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Lorem\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "[setup] add event with moderation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Lorem ipsum aliquam.\",\r\n    \"category\": 1,\r\n    \"description\": \"Lorem ipsum aliquam.\",\r\n    \"eventDate\": \"2030-01-01 00:00:00\",\r\n    \"location\": {\"lat\": 55.754167, \"lon\": 37.62},\r\n    \"paid\": false,\r\n    \"participantLimit\": 10,\r\n    \"requestModeration\": true,\r\n    \"title\": \"Lorem\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add Comment",
			"item": [
				{
					"name": "Add comment successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(1);\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"    pm.expect(target.text).equal(\"This is a test comment\");\r",
									"    pm.expect(target.user).equal(1);\r",
									"    pm.expect(target.event).equal(1);\r",
									"    pm.expect(target.state).equal(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a test comment\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment successful with moderation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(2);\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"    pm.expect(target.text).equal(\"This is a test comment 2\");\r",
									"    pm.expect(target.user).equal(2);\r",
									"    pm.expect(target.event).equal(2);\r",
									"    pm.expect(target.state).equal(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a test comment 2\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/comments?eventId=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment invalid userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a test comment\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999/comments?eventId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment invalid eventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"This is a test comment\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments?eventId=9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "9999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Comment",
			"item": [
				{
					"name": "Update comment text successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(1);\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"    pm.expect(target.text).equal(\"Updated comment text\");\r",
									"    pm.expect(target.user).equal(1);\r",
									"    pm.expect(target.event).equal(1);\r",
									"    pm.expect(target.state).equal(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Updated comment text\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment status CANCEL successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(2);\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"    pm.expect(target.text).equal(\"This is a test comment 2\");\r",
									"    pm.expect(target.user).equal(2);\r",
									"    pm.expect(target.event).equal(2);\r",
									"    pm.expect(target.state).equal(\"CANCELED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"CANCEL\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment status PUBLISH successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).equal(2);\r",
									"    pm.expect(target.created).to.not.be.null;\r",
									"    pm.expect(target.text).equal(\"This is a test comment 2\");\r",
									"    pm.expect(target.user).equal(2);\r",
									"    pm.expect(target.event).equal(2);\r",
									"    pm.expect(target.state).equal(\"PENDING\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"PUBLISH\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment status wrong current status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"CANCEL\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change status by event initiator",
			"item": [
				{
					"name": "Reject comments by event ititiarot successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target[0]).to.not.be.null;\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('created');\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"    pm.expect(target[0]).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(2);\r",
									"    pm.expect(target[0].created).to.not.be.null;\r",
									"    pm.expect(target[0].text).equal(\"This is a test comment 2\");\r",
									"    pm.expect(target[0].user).equal(2);\r",
									"    pm.expect(target[0].event).equal(2);\r",
									"    pm.expect(target[0].state).equal(\"REJECTED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [2],\r\n    \"status\": \"REJECT\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve comments by event ititiarot successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target[0]).to.not.be.null;\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('created');\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"    pm.expect(target[0]).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(2);\r",
									"    pm.expect(target[0].created).to.not.be.null;\r",
									"    pm.expect(target[0].text).equal(\"This is a test comment 2\");\r",
									"    pm.expect(target[0].user).equal(2);\r",
									"    pm.expect(target[0].event).equal(2);\r",
									"    pm.expect(target[0].state).equal(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [2],\r\n    \"status\": \"APPROVE\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rejcet comments by event ititiarot from wrong state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [2],\r\n    \"status\": \"REJECT\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve comments by event ititiarot from wrong state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentIds\": [2],\r\n    \"status\": \"APPROVE\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Event Comments",
			"item": [
				{
					"name": "Get Event Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, created, text, user, event, state\", function () {\r",
									"    pm.expect(target).to.not.be.null;\r",
									"    pm.expect(target[0]).to.have.property('created');\r",
									"    pm.expect(target[0]).to.have.property('text');\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('user');\r",
									"    pm.expect(target[0]).to.have.property('event');\r",
									"    pm.expect(target[0]).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(1);\r",
									"    pm.expect(target[0].created).to.not.be.null;\r",
									"    pm.expect(target[0].text).equal(\"Updated comment text\");\r",
									"    pm.expect(target[0].user).equal(1);\r",
									"    pm.expect(target[0].event).equal(1);\r",
									"    pm.expect(target[0].state).equal(\"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/1/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Comment",
			"item": [
				{
					"name": "Delete invalid commentId",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete not from owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/2/comments/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if comment deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Список комментариев должен быть пуст\", function () {\r",
									"    pm.expect(target).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/2/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"2",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}